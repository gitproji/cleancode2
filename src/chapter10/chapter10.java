package chapter10;

public class chapter10 {

    //////* 클래스 *//////

    /* 클래스 체계 */
    //가장 먼저 변수 목록이 나오며, 그중 정적(static) 공개(public) 상수가 있다면 맨 처음에 나온다.
    //다음으로 정적 비공개(private) 변수가 나오며, 이어서 비공개 인스턴스 변수가 나온다.
    //
    //두 번째로 공개 함수가 나온다.
    //비공개 함수는 자신을 호출하는 공개 함수 직후에 넣는다.
    //즉, 추상화 단계가 순차적으로 내려간다.

    //변수와 유틸리티 함수는 가능한 공개하지 않는 편이 낫지만 반드시 숨겨야 한다는 법칙도 없다.
    //때로는 protected로 선언해 테스트 코드에 접근을 허용하기도 한다.
    //캡슐화를 풀어주는 결정은 언제나 최후의 수단이다.


    /* 클래스는 작아야 한다 */
    //함수와 마찬가지로, '작게'가 기본 규칙이다.
    //클래스의 이름은 해당 클래스의 책임을 기술해야 한다.
    //또한 클래스 설명은 만일(if), 그리고(and), -(하)며(or), 하지만(but)을 사용하지 않고서 25단어 내외로 가능해야 한다.

    //단일 책임 원칙(SRP)은 클래스나 모듈을 변경할 이유가 단 하나뿐이어야 한다는 원칙이다.
    //SRP는 객체 지향 설계에서 더욱 중요한 개념이다.
    //큰 클래스 몇 개가 아니라 작은 클래스 여럿으로 이뤄진 시스템이 더 바람직하다.

    //클래스는 인스턴스 변수 수가 작아야 한다.
    //각 클래스 메서드는 클래스 인스턴스 변수를 하나 이상 사용해야 한다.
    //함수를 작게, 매개변수 목록을 짧게 라는 전략을 따르다 보면 때때로 메서드만이 사용하는 인스턴스 변수가 아주 많아진다.
    //이는 십중팔구 새로운 클래스로 쪼개야 한다는 신호다.
    //응집도가 높아지도록 변수와 메서드를 적절히 분리해 새로운 클래스 두세 개로 쪼개준다.

    //큰 함수를 작은 함수 여럿으로 나누면 클래스 수가 많아진다.
    //클래스가 응집력을 잃는다면 쪼개라
    //작은 클래스 여러개로 쪼개면 프로그램에 점점 더 체계가 잡히고 구조가 투명해진다.


    /* 변경하기 쉬운 클래스 */
    //클래스를 분리하여 단순하게 만들면 함수 하나를 수정했다고 다른 함수가 망가질 위험도 사라지고,
    //테스트 관점에서 모든 논리를 구석구석 증명하기도 쉬워진다.
    //새 기능을 수정하거나 기존 기능을 변경할 때 건드릴 코드가 최소인 시스템 구조가 바람직하다.
    //이상적인 시스템이라면 새 기능을 추가할 때 시스템을 확장할 뿐 기존 코드를 변경하지는 않는다.

    //상세한 구현에 의존하는 클라이언트 클래스는 구현이 바뀌면 위험에 빠진다.
    //인터페이스와 추상 클래스를 사용해 구현이 미치는 영향을 격리한다.

    //테스트가 가능할 정도로 시스템의 결합도를 낮추면 유연성과 재사용성도 더욱 높아진다.
    //시스템 요소가 잘 격리되어 있으면 각 요소를 이해하기도 더 쉬워진다.

    //DIP : 클래스가 상세한 구현이 아니라 추상화에 의존해야 한다는 원칙
}
